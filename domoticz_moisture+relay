#include <WiFi.h>
#include <ArduinoMqttClient.h>
#include <ArduinoJson.h>

// Define sensor pins
int SensorPin[] = {36, 39, 34, 35, 32, 33};

// Define WiFi and MQTT parameters
const char* ssid = "XXXXXX"; // Replace with your actual SSID
const char* wifi_password = "XXXXXX"; // Replace with your actual WiFi password
const char* mqtt_server = "192.168.1.xx";
const char* mqtt_username = "XXXXXX";
const char* mqtt_password = "XXXXXX";
const char* clientID = "client_Plant";


// MQTT topics
const char* domoticz_topic = "domoticz/in"; // Domoticz MQTT topic

// Initialise the WiFi and MQTT Client objects
WiFiClient wifiClient;
MqttClient mqttClient(wifiClient);

// Store the last published values for each sensor
int lastPublishedValues[6] = {0, 0, 0, 0, 0, 0};

// Define the idx for each sensor
int sensorIdx[] = {506, 507, 508, 509, 510, 511}; // Replace with actual Domoticz idx for each sensor

// Raw sensor value range and corresponding scale
int rawValueRange[2] = {2830, 890}; // Raw sensor values range from 2800 (dry) to 400 (wet)
int scaleRange[2] = {200, 0}; // Corresponding scale from 200 (dry) to 0 (wet)

// Relay and moisture threshold
const int relayPin = 26; // GPIO pin connected to the relay
const int moistureThreshold = 100; // Threshold for moisture level
const long relayOnTime = 10000; // Time in milliseconds to keep the relay on

// Function to map raw sensor values to the desired scale
int mapSensorValue(int rawValue) {
  return map(rawValue, rawValueRange[0], rawValueRange[1], scaleRange[0], scaleRange[1]);
}

// Connect to WiFi and MQTT
void connectToNetwork() {
  Serial.print("Connecting to WiFi: ");
  Serial.println(ssid);
  WiFi.begin(ssid, wifi_password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(600);
    Serial.print(".");
  }
  Serial.println("WiFi connected");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  // Set the MQTT client ID, username, and password
  mqttClient.setId(clientID);
  mqttClient.setUsernamePassword(mqtt_username, mqtt_password);

  // Connect to the MQTT server
  while (!mqttClient.connect(mqtt_server, 1883)) {
    Serial.print(".");
    delay(5000);
  }
  Serial.println("Connected to MQTT");
}

// Setup function
void setup() {
  Serial.begin(9600);
  connectToNetwork();
  Serial.setTimeout(3000);
  
  pinMode(relayPin, OUTPUT); // Initialize the relay pin as an output
  digitalWrite(relayPin, HIGH); // Ensure relay is off at startup (assuming active-low)
}

// Loop function
void loop() {
  // Keep the MQTT client connected
  if (!mqttClient.connected()) {
    connectToNetwork();
  }
  mqttClient.poll();

// Read sensor values, average them, and publish to MQTT if there's a change
  for (int i = 0; i < 6; i++) {
    int sum = 0;
    for (int j = 0; j < 10; j++) {
      sum += analogRead(SensorPin[i]);  // Sum the readings
    }
    int average = sum / 10;  // Calculate the average
    // Publish raw sensor value to serial (added code)
    Serial.print("Sensor ");
    Serial.print(i);
    Serial.print(" Raw Moisture: ");
    Serial.println(average);

    int processedValue = mapSensorValue(average); // Map the average to the desired scale

    // Check if the processed value has changed and publish it
    if (processedValue != lastPublishedValues[i]) {
      lastPublishedValues[i] = processedValue; // Update the stored value for this sensor

      // Print processed sensor data to serial
      Serial.print("Sensor ");
      Serial.print(i);
      Serial.print(" Mapped Moisture: ");
      Serial.println(processedValue);

      // Prepare the JSON payload for Domoticz
      DynamicJsonDocument doc(1024);
      doc["idx"] = sensorIdx[i];
      doc["nvalue"] = processedValue; // nvalue is not used for custom sensors, but it must be present
      doc["svalue"] = String(processedValue); // svalue is the string representation of the value

      // Convert the JSON object to a string
      String payload;
      serializeJson(doc, payload);

      // Publish data to MQTT for Domoticz
      mqttClient.beginMessage(domoticz_topic);
      mqttClient.print(payload);
      mqttClient.endMessage();
    }
  bool belowThreshold = false; // Flag to track if any sensor is below threshold
  for (int i = 0; i < 6; i++) {
    int processedValue = mapSensorValue(analogRead(SensorPin[i])); // Process the value for the current sensor
    if (processedValue < moistureThreshold) {
      belowThreshold = true; // Set the flag to true if any sensor is below threshold
      break; // Exit the loop as soon as a sensor is found below threshold
    }
  }

  if (belowThreshold) {
    digitalWrite(relayPin, LOW); // Turn on the relay (assuming active-low)
    delay(relayOnTime); // Keep the relay on for the specified time
    digitalWrite(relayPin, HIGH); // Turn off the relay
  }

  delay(5000);  // Pause for 5 seconds (5,000 milliseconds)
  // Sleep for 1 hour (60 minutes * 60 seconds * 1000 milliseconds)
  ESP.deepSleep(60 * 60 * 1e6);
}
